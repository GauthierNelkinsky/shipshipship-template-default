name: Build and Upload Theme to PocketBase

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Clean install dependencies
        run: |
          rm -rf package-lock.json node_modules
          npm install

      - name: Build theme
        run: npm run build

      - name: Create theme manifest
        run: |
          echo '{
            "name": "${{ github.event.repository.name }}",
            "version": "${{ github.ref_name }}",
            "built_with": "SvelteKit",
            "build_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "api_compatibility": "v1",
            "commit_sha": "${{ github.sha }}",
            "repository": "${{ github.repository }}"
          }' > build/theme-manifest.json

      - name: Create theme package
        run: |
          cd build
          zip -r "../${{ github.event.repository.name }}-${{ github.ref_name }}.zip" .
          cd ..
          echo "ZIP_FILE=${{ github.event.repository.name }}-${{ github.ref_name }}.zip" >> $GITHUB_ENV

      - name: Extract theme info from package.json
        id: theme_info
        run: |
          DISPLAY_NAME=$(node -p "require('./package.json').displayName || require('./package.json').name || '${{ github.event.repository.name }}'" 2>/dev/null || echo "${{ github.event.repository.name }}")
          DESCRIPTION=$(node -p "require('./package.json').description || ''" 2>/dev/null || echo "")
          DEMO_URL=$(node -p "require('./package.json').shipshipship?.demoUrl || ''" 2>/dev/null || echo "")
          FEATURES=$(node -p "JSON.stringify(require('./package.json').shipshipship?.features || [])" 2>/dev/null || echo "[]")
          TAGS=$(node -p "JSON.stringify(require('./package.json').shipshipship?.tags || [])" 2>/dev/null || echo "[]")

          if [ "$TAGS" = "[]" ]; then
            TAGS=$(node -p "JSON.stringify(require('./package.json').keywords || [])" 2>/dev/null || echo "[]")
          fi

          DEMO_URL="${{ vars.DEMO_URL || secrets.DEMO_URL || '$DEMO_URL' }}"

          echo "display_name=$DISPLAY_NAME" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "demo_url=$DEMO_URL" >> $GITHUB_OUTPUT
          echo "features=$FEATURES" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

          echo "‚úÖ Extracted theme info:"
          echo "  Display Name: $DISPLAY_NAME"
          echo "  Description: $DESCRIPTION"
          echo "  Demo URL: $DEMO_URL"
          echo "  Features: $FEATURES"
          echo "  Tags: $TAGS"

      - name: Upload theme to PocketBase
        env:
          POCKETBASE_URL: ${{ secrets.POCKETBASE_URL }}
          POCKETBASE_EMAIL: ${{ secrets.POCKETBASE_EMAIL }}
          POCKETBASE_PASSWORD: ${{ secrets.POCKETBASE_PASSWORD }}
        run: |
          AUTH_RESPONSE=$(curl -s -X POST "$POCKETBASE_URL/api/collections/users/auth-with-password" \
            -H "Content-Type: application/json" \
            -d '{
              "identity": "'$POCKETBASE_EMAIL'",
              "password": "'$POCKETBASE_PASSWORD'"
            }')

          TOKEN=$(echo $AUTH_RESPONSE | jq -r '.token')
          USER_ID=$(echo $AUTH_RESPONSE | jq -r '.record.id')

          if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
            echo "‚ùå Authentication failed"
            echo "Response: $AUTH_RESPONSE"
            exit 1
          fi

          echo "‚úÖ Authenticated successfully"

          EXISTING_THEME=$(curl -s -X GET "$POCKETBASE_URL/api/collections/themes/records?filter=(name='${{ github.event.repository.name }}')" \
            -H "Authorization: Bearer $TOKEN")

          EXISTING_ID=$(echo $EXISTING_THEME | jq -r '.items[0].id // empty')

          FEATURES_JSON='${{ steps.theme_info.outputs.features }}'
          TAGS_JSON='${{ steps.theme_info.outputs.tags }}'
          TECHNOLOGIES_JSON='["SvelteKit", "TypeScript", "Tailwind CSS"]'
          METADATA_JSON='{"build_date":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","commit_sha":"${{ github.sha }}","repository":"${{ github.repository }}"}'

          echo "üîç Debug JSON data:"
          echo "  Features: $FEATURES_JSON"
          echo "  Tags: $TAGS_JSON"
          echo "  Technologies: $TECHNOLOGIES_JSON"
          echo "  Metadata: $METADATA_JSON"

          if [ -n "$EXISTING_ID" ]; then
            echo "üîÑ Updating existing theme (ID: $EXISTING_ID)"

            JSON_PAYLOAD=$(cat <<EOF
          {
            "owner": "$USER_ID",
            "name": "${{ github.event.repository.name }}",
            "display_name": "${{ steps.theme_info.outputs.display_name }}",
            "description": "${{ steps.theme_info.outputs.description }}",
            "version": "${{ github.ref_name }}",
            "demo_url": "${{ steps.theme_info.outputs.demo_url }}",
            "tags": $TAGS_JSON,
            "features": $FEATURES_JSON,
            "technologies": $TECHNOLOGIES_JSON,
            "metadata": $METADATA_JSON,
            "submission_status": "pending"
          }
          EOF
          )

            echo "üì§ Sending JSON payload:"
            echo "$JSON_PAYLOAD" | jq .

            RESPONSE=$(curl -s -X PATCH "$POCKETBASE_URL/api/collections/themes/records/$EXISTING_ID" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD")

            echo "üì• Response from JSON update:"
            echo "$RESPONSE" | jq .

            if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
              echo "üì¶ Updating build file..."
              FILE_RESPONSE=$(curl -s -X PATCH "$POCKETBASE_URL/api/collections/themes/records/$EXISTING_ID" \
                -H "Authorization: Bearer $TOKEN" \
                -F "build_file=@$ZIP_FILE")
              echo "üì• File update response:"
              echo "$FILE_RESPONSE" | jq .
              RESPONSE="$FILE_RESPONSE"
            fi

          else
            echo "üÜï Creating new theme"
            RESPONSE=$(curl -s -X POST "$POCKETBASE_URL/api/collections/themes/records" \
              -H "Authorization: Bearer $TOKEN" \
              -F "owner=$USER_ID" \
              -F "name=${{ github.event.repository.name }}" \
              -F "display_name=${{ steps.theme_info.outputs.display_name }}" \
              -F "description=${{ steps.theme_info.outputs.description }}" \
              -F "version=${{ github.ref_name }}" \
              -F "demo_url=${{ steps.theme_info.outputs.demo_url }}" \
              -F "build_file=@$ZIP_FILE" \
              -F "tags=$TAGS_JSON" \
              -F "features=$FEATURES_JSON" \
              -F "technologies=$TECHNOLOGIES_JSON" \
              -F "metadata=$METADATA_JSON" \
              -F "submission_status=pending")

            echo "üì• Create response:"
            echo "$RESPONSE" | jq .
          fi

          if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
            THEME_ID=$(echo "$RESPONSE" | jq -r '.id')
            echo "‚úÖ Theme uploaded successfully!"
            echo "üÜî Theme ID: $THEME_ID"
            echo "üì¶ Package: $ZIP_FILE"
            echo "üîó Demo: ${{ steps.theme_info.outputs.demo_url }}"
            echo "üè∑Ô∏è Tags: $TAGS_JSON"
            echo "‚ú® Features: $FEATURES_JSON"
          else
            echo "‚ùå Upload failed"
            echo "üì• Full response:"
            echo "$RESPONSE"
            exit 1
          fi
